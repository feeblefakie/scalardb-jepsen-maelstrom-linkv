2025-06-20 00:56:56,466{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w lin-kv --bin ./maelstrom-wrapper.sh --node-count 1 --time-limit 10 --rate 10
2025-06-20 00:56:56,525{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 1
 :availability nil
 :max-txn-length 4
 :concurrency 1
 :db
 #object[maelstrom.db$db$reify__16612
         "0x7307e418"
         "maelstrom.db$db$reify__16612@7307e418"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "lin-kv"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x69c27acb" "2025-06-20T00:56:56.425+09:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15721
         "0x72b8b04f"
         "maelstrom.net$jepsen_net$reify__15721@72b8b04f"]
 :client
 #object[maelstrom.workload.lin_kv$client$reify__20973
         "0x1b131102"
         "maelstrom.workload.lin_kv$client$reify__20973@1b131102"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x75be3cdf"
         "java.util.concurrent.CyclicBarrier@75be3cdf"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 10.0
 :checker
 #object[jepsen.checker$compose$reify__11089
         "0xf500481"
         "jepsen.checker$compose$reify__11089@f500481"]
 :argv
 ("test"
  "-w"
  "lin-kv"
  "--bin"
  "./maelstrom-wrapper.sh"
  "--node-count"
  "1"
  "--time-limit"
  "10"
  "--rate"
  "10")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16905@38dde7ec"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16886@3bc57af4"]})
 :nodes ["n0"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "./maelstrom-wrapper.sh"
 :generator
 #object[jepsen.util.Forgettable
         "0x2523730b"
         (jepsen.generator.TimeLimit
          {:limit 10000000000,
           :cutoff nil,
           :gen (jepsen.generator.Any
                 {:gens [(jepsen.generator.OnThreads
                          {:f #{:nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                   "0x87f8146"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__12077@87f8146"],
                           :gen nil})
                         (jepsen.generator.OnThreads
                          {:f #jepsen.generator.context.AllBut{:element :nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                   "0x10982760"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__12077@10982760"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 200000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.OnThreads
                                        {:f #jepsen.generator.context.AllBut{:element :nemesis},
                                         :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                                 "0x50626d22"
                                                                 "jepsen.generator.context$make_thread_filter$lazy_filter__12077@50626d22"],
                                         :gen (jepsen.independent.ConcurrentGenerator
                                               {:n 2,
                                                :fgen #object[jepsen.tests.linearizable_register$test$fn__17385
                                                              "0x7cc742d"
                                                              "jepsen.tests.linearizable_register$test$fn__17385@7cc742d"],
                                                :group->threads nil,
                                                :thread->group nil,
                                                :group->context-filter nil,
                                                :keys (0 1 2 3 4 5 6 7 ...),
                                                :gens nil})})})})]})})]
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15724
         "0x22bf2a0d"
         "maelstrom.net$jepsen_os$reify__15724@22bf2a0d"]
 :time-limit 10
 :workload :lin-kv
 :consistency-models [:strict-serializable]
 :topology :grid}

2025-06-20 00:56:57,766{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2025-06-20 00:56:57,767{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2025-06-20 00:56:57,768{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2025-06-20 00:56:57,769{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2025-06-20 00:56:57,770{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2025-06-20 00:56:57,771{GMT}	INFO	[jepsen node n0] maelstrom.process: launching ./maelstrom-wrapper.sh []
2025-06-20 00:56:58,291{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2025-06-20 00:56:58,329{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2025-06-20 00:56:59,782{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2025-06-20 00:56:59,786{GMT}	WARN	[jepsen test runner] jepsen.core: Test crashed!
clojure.lang.ExceptionInfo: Generator threw java.lang.AssertionError - Assert failed: With 1 worker threads, this jepsen.concurrent/concurrent-generator cannot run a key with 2 threads concurrently. Consider raising your test's :concurrency to at least 2.
(<= group-size thread-count) when asked for an operation. Generator:
jepsen.generator.TimeLimit{
  :limit 10000000000,
  :cutoff nil,
  :gen jepsen.generator.Any{
    :gens [jepsen.generator.OnThreads{
             :f #{:nemesis},
             :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077 0x87f8146 "jepsen.generator.context$make_thread_filter$lazy_filter__12077@87f8146"],
             :gen nil}
           jepsen.generator.OnThreads{
             :f {:element :nemesis},
             :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077 0x10982760 "jepsen.generator.context$make_thread_filter$lazy_filter__12077@10982760"],
             :gen jepsen.generator.Stagger{
               :dt 200000000,
               :next-time nil,
               :gen jepsen.generator.OnThreads{
                 :f {:element :nemesis},
                 :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077 0x50626d22 "jepsen.generator.context$make_thread_filter$lazy_filter__12077@50626d22"],
                 :gen jepsen.independent.ConcurrentGenerator{
                   :n 2,
                   :fgen #object[jepsen.tests.linearizable_register$test$fn__17385 0x7cc742d "jepsen.tests.linearizable_register$test$fn__17385@7cc742d"],
                   :group->threads nil,
                   :thread->group nil,
                   :group->context-filter nil,
                   :keys (0 1 2 3 4 5 6 7 8 9 ...),
                   :gens nil}}}}]}}

Context:

{:time 8701375,
 :next-thread-index 0,
 :translation-table
 {:int-thread-count 1,
  :named-threads [:nemesis],
  :named-thread->index {:nemesis 0}},
 :all-threads #{0 1},
 :free-threads #{0 1},
 :thread-index->process [0 :nemesis],
 :process->thread {0 0, :nemesis :nemesis},
 :ext-map {}}

	at slingshot.support$stack_trace.invoke(support.clj:201)
	at jepsen.generator.FriendlyExceptions.op(generator.clj:716)
	at jepsen.generator.Validate.op(generator.clj:655)
	at jepsen.generator.interpreter$run_BANG_.invokeStatic(interpreter.clj:262)
	at jepsen.generator.interpreter$run_BANG_.invoke(interpreter.clj:184)
	at jepsen.core$run_case_BANG_.invokeStatic(core.clj:213)
	at jepsen.core$run_case_BANG_.invoke(core.clj:208)
	at jepsen.core$run_BANG_$fn__13912$fn__13915$fn__13920.invoke(core.clj:402)
	at jepsen.core$run_BANG_$fn__13912$fn__13915.invoke(core.clj:400)
	at jepsen.core$run_BANG_$fn__13912.invoke(core.clj:398)
	at jepsen.core$run_BANG_.invokeStatic(core.clj:396)
	at jepsen.core$run_BANG_.invoke(core.clj:322)
	at jepsen.cli$single_test_cmd$fn__15082.invoke(cli.clj:396)
	at jepsen.cli$run_BANG_.invokeStatic(cli.clj:329)
	at jepsen.cli$run_BANG_.invoke(cli.clj:258)
	at maelstrom.core$_main.invokeStatic(core.clj:269)
	at maelstrom.core$_main.doInvoke(core.clj:267)
	at clojure.lang.RestFn.applyTo(RestFn.java:140)
	at maelstrom.core.main(Unknown Source)
Caused by: java.lang.AssertionError: Assert failed: With 1 worker threads, this jepsen.concurrent/concurrent-generator cannot run a key with 2 threads concurrently. Consider raising your test's :concurrency to at least 2.
(<= group-size thread-count)
	at jepsen.independent$group_threads.invokeStatic(independent.clj:63)
	at jepsen.independent$group_threads.invoke(independent.clj:55)
	at jepsen.independent$make_group__GT_threads.invokeStatic(independent.clj:88)
	at jepsen.independent$make_group__GT_threads.invoke(independent.clj:84)
	at jepsen.independent.ConcurrentGenerator.op(independent.clj:132)
	at jepsen.generator.OnThreads.op(generator.clj:885)
	at jepsen.generator.Stagger.op(generator.clj:1406)
	at jepsen.generator.OnThreads.op(generator.clj:885)
	at jepsen.generator.Any$fn__12505.invoke(generator.clj:956)
	at clojure.core$map_indexed$mapi__8680$fn__8681.invoke(core.clj:7500)
	at clojure.lang.LazySeq.force(LazySeq.java:50)
	at clojure.lang.LazySeq.realize(LazySeq.java:89)
	at clojure.lang.LazySeq.seq(LazySeq.java:106)
	at clojure.lang.RT.seq(RT.java:555)
	at clojure.core$seq__5486.invokeStatic(core.clj:139)
	at clojure.core.protocols$seq_reduce.invokeStatic(protocols.clj:24)
	at clojure.core.protocols$fn__8262.invokeStatic(protocols.clj:74)
	at clojure.core.protocols$fn__8262.invoke(protocols.clj:74)
	at clojure.core.protocols$fn__8203$G__8198__8216.invoke(protocols.clj:13)
	at clojure.core$reduce.invokeStatic(core.clj:6965)
	at clojure.core$reduce.invoke(core.clj:6947)
	at jepsen.generator.Any.op(generator.clj:960)
	at jepsen.generator.TimeLimit.op(generator.clj:1380)
	at jepsen.generator.FriendlyExceptions.op(generator.clj:713)
	... 17 common frames omitted
