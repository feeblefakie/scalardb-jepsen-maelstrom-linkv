2025-06-19 23:50:07,718{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w lin-kv --bin ./maelstrom-wrapper.sh --node-count 1 --concurrency 2 --time-limit 10 --rate 1
2025-06-19 23:50:07,746{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 1
 :availability nil
 :max-txn-length 4
 :concurrency 2
 :db
 #object[maelstrom.db$db$reify__16612
         "0x7307e418"
         "maelstrom.db$db$reify__16612@7307e418"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "lin-kv"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x69c27acb" "2025-06-19T23:50:07.695+09:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15721
         "0x72b8b04f"
         "maelstrom.net$jepsen_net$reify__15721@72b8b04f"]
 :client
 #object[maelstrom.workload.lin_kv$client$reify__20973
         "0x1b131102"
         "maelstrom.workload.lin_kv$client$reify__20973@1b131102"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x75be3cdf"
         "java.util.concurrent.CyclicBarrier@75be3cdf"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 1.0
 :checker
 #object[jepsen.checker$compose$reify__11089
         "0xf500481"
         "jepsen.checker$compose$reify__11089@f500481"]
 :argv
 ("test"
  "-w"
  "lin-kv"
  "--bin"
  "./maelstrom-wrapper.sh"
  "--node-count"
  "1"
  "--concurrency"
  "2"
  "--time-limit"
  "10"
  "--rate"
  "1")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16905@38dde7ec"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16886@3bc57af4"]})
 :nodes ["n0"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "./maelstrom-wrapper.sh"
 :generator
 #object[jepsen.util.Forgettable
         "0x2523730b"
         (jepsen.generator.TimeLimit
          {:limit 10000000000,
           :cutoff nil,
           :gen (jepsen.generator.Any
                 {:gens [(jepsen.generator.OnThreads
                          {:f #{:nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                   "0x87f8146"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__12077@87f8146"],
                           :gen nil})
                         (jepsen.generator.OnThreads
                          {:f #jepsen.generator.context.AllBut{:element :nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                   "0x10982760"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__12077@10982760"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 2000000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.OnThreads
                                        {:f #jepsen.generator.context.AllBut{:element :nemesis},
                                         :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                                 "0x50626d22"
                                                                 "jepsen.generator.context$make_thread_filter$lazy_filter__12077@50626d22"],
                                         :gen (jepsen.independent.ConcurrentGenerator
                                               {:n 2,
                                                :fgen #object[jepsen.tests.linearizable_register$test$fn__17385
                                                              "0x7cc742d"
                                                              "jepsen.tests.linearizable_register$test$fn__17385@7cc742d"],
                                                :group->threads nil,
                                                :thread->group nil,
                                                :group->context-filter nil,
                                                :keys (0 1 2 3 4 5 6 7 ...),
                                                :gens nil})})})})]})})]
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15724
         "0x22bf2a0d"
         "maelstrom.net$jepsen_os$reify__15724@22bf2a0d"]
 :time-limit 10
 :workload :lin-kv
 :consistency-models [:strict-serializable]
 :topology :grid}

2025-06-19 23:50:08,664{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2025-06-19 23:50:08,664{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2025-06-19 23:50:08,665{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2025-06-19 23:50:08,667{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2025-06-19 23:50:08,668{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2025-06-19 23:50:08,668{GMT}	INFO	[jepsen node n0] maelstrom.process: launching ./maelstrom-wrapper.sh []
2025-06-19 23:50:08,898{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2025-06-19 23:50:08,910{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:cas	[0 [4 1]]
2025-06-19 23:50:09,115{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	[0 nil]
2025-06-19 23:50:09,919{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:info	:cas	[0 [4 1]]	:net-timeout
2025-06-19 23:50:09,924{GMT}	INFO	[jepsen worker 1] jepsen.util: 3	:invoke	:write	[0 3]
2025-06-19 23:50:10,116{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:fail	:read	[0 nil]	:net-timeout
2025-06-19 23:50:10,925{GMT}	INFO	[jepsen worker 1] jepsen.util: 3	:info	:write	[0 3]	:net-timeout
2025-06-19 23:50:11,577{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	[0 nil]
2025-06-19 23:50:12,580{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:fail	:read	[0 nil]	:net-timeout
2025-06-19 23:50:12,616{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	[0 nil]
2025-06-19 23:50:13,005{GMT}	INFO	[jepsen worker 1] jepsen.util: 5	:invoke	:cas	[0 [3 4]]
2025-06-19 23:50:13,624{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:fail	:read	[0 nil]	:net-timeout
2025-06-19 23:50:13,926{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	[0 nil]
2025-06-19 23:50:14,006{GMT}	INFO	[jepsen worker 1] jepsen.util: 5	:info	:cas	[0 [3 4]]	:net-timeout
2025-06-19 23:50:14,930{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:fail	:read	[0 nil]	:net-timeout
2025-06-19 23:50:15,119{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	[0 nil]
2025-06-19 23:50:16,011{GMT}	INFO	[jepsen worker 1] jepsen.util: 7	:invoke	:cas	[0 [3 3]]
2025-06-19 23:50:16,123{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:fail	:read	[0 nil]	:net-timeout
2025-06-19 23:50:17,012{GMT}	INFO	[jepsen worker 1] jepsen.util: 7	:info	:cas	[0 [3 3]]	:net-timeout
2025-06-19 23:50:17,042{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	[0 nil]
2025-06-19 23:50:18,046{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:fail	:read	[0 nil]	:net-timeout
2025-06-19 23:50:18,684{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	[0 nil]
2025-06-19 23:50:19,686{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:fail	:read	[0 nil]	:net-timeout
2025-06-19 23:50:19,696{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2025-06-19 23:50:19,715{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2025-06-19 23:50:21,694{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2025-06-19 23:50:21,697{GMT}	INFO	[jepsen test runner] jepsen.core: Analyzing...
2025-06-19 23:50:21,765{GMT}	INFO	[clojure-agent-send-pool-0] jepsen.independent: Wrote /Users/hiroyuki/Dropbox/Docs/git/scalardb-maelstrom-kv/store/lin-kv/20250619T235007.695+0900/independent/0/results.edn
2025-06-19 23:50:21,767{GMT}	INFO	[clojure-agent-send-pool-0] jepsen.independent: Wrote /Users/hiroyuki/Dropbox/Docs/git/scalardb-maelstrom-kv/store/lin-kv/20250619T235007.695+0900/independent/0/history.edn
2025-06-19 23:50:21,779{GMT}	INFO	[jepsen test runner] jepsen.core: Analysis complete
2025-06-19 23:50:21,793{GMT}	INFO	[jepsen results] jepsen.store: Wrote /Users/hiroyuki/Dropbox/Docs/git/scalardb-maelstrom-kv/store/lin-kv/20250619T235007.695+0900/results.edn
2025-06-19 23:50:21,811{GMT}	INFO	[jepsen test runner] jepsen.core: {:perf {:latency-graph {:valid? true},
        :rate-graph {:valid? true},
        :valid? true},
 :timeline {:valid? true},
 :exceptions {:valid? true},
 :stats {:valid? false,
         :count 11,
         :ok-count 0,
         :fail-count 7,
         :info-count 4,
         :by-f {:cas {:valid? false,
                      :count 3,
                      :ok-count 0,
                      :fail-count 0,
                      :info-count 3},
                :read {:valid? false,
                       :count 7,
                       :ok-count 0,
                       :fail-count 7,
                       :info-count 0},
                :write {:valid? false,
                        :count 1,
                        :ok-count 0,
                        :fail-count 0,
                        :info-count 1}}},
 :availability {:valid? true, :ok-fraction 0.0},
 :net {:all {:send-count 13,
             :recv-count 13,
             :msg-count 13,
             :msgs-per-op 1.1818181},
       :clients {:send-count 13, :recv-count 13, :msg-count 13},
       :servers {:send-count 0,
                 :recv-count 0,
                 :msg-count 0,
                 :msgs-per-op 0.0},
       :valid? true},
 :workload {:valid? true,
            :results {0 {:linearizable {:valid? true,
                                        :configs ({:model #knossos.model.CASRegister{:value nil},
                                                   :last-op nil,
                                                   :pending [{:process 1,
                                                              :type :invoke,
                                                              :f :cas,
                                                              :value [4
                                                                      1],
                                                              :index 0,
                                                              :time 6651000}
                                                             {:process 3,
                                                              :type :invoke,
                                                              :f :write,
                                                              :value 3,
                                                              :index 3,
                                                              :time 1020878875}
                                                             {:process 5,
                                                              :type :invoke,
                                                              :f :cas,
                                                              :value [3
                                                                      4],
                                                              :index 9,
                                                              :time 4104155625}
                                                             {:process 7,
                                                              :type :invoke,
                                                              :f :cas,
                                                              :value [3
                                                                      3],
                                                              :index 15,
                                                              :time 7112622792}]}),
                                        :final-paths ()},
                         :timeline {:valid? true},
                         :valid? true}},
            :failures []},
 :valid? false}


Analysis invalid! (ﾉಥ益ಥ）ﾉ ┻━┻
